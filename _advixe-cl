#compdef advixe-cl

# Copyright 2018 CERN for the benefit of the LHCb Collaboration.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization
# or submit itself to any jurisdiction.

local advixe_actions;advixe_actions=(
'--collect'
'--command[Send a command to a running data collection]'
'--help[Print help message (global one, or for an action)]'
'--import-dir'
'--mark-up-loops'
'--report'
'--snapshot[Create a result snapshot]'
'--version[Print version number]'
'--workflow')

_conditional_normal() {
  # NB: the current word is in words, and I don't want to trigger here on --<tab>
  if [[ ${words[(i)--]} -lt ${#words} ]]; then
    local shift_by
    shift_by=${words[(i)--]}
    shift $shift_by words
    (( CURRENT -= $shift_by ))

    #for ((i = 1 ; i <= ${#words} ; i++))
    #do
    #  _message "word $i is $words[i]"
    #done
    #_message "CURRENT is $CURRENT"
    _normal
  else
    # there is no -- in the current line
    return 33
  fi
}

_advixe_cl_collect() {
  if [[ $CURRENT = 3 ]]; then
    local -a advixe_collect_data
    advixe_collect_data=(
    survey:"Explore where to add efficient vectorization and/or threading."
    dependencies:"Identify and explore loop-carried dependencies for marked loops."
    map:"Identify and explore complex memory accesses for marked loops."
    suitability:"Analyze the annotated program to check its predicted parallel performance."
    tripcounts:"Find how many iterations are executed."
    )   
    _describe -t collect-datas 'data to collect' advixe_collect_data $*
    return 0
  fi
}

_advixe_cl_command() {
  if [[ $CURRENT = 3 ]]; then
    local -a advixe_command_commands
    advixe_command_commands=(
    'detach'
    'pause'
    'resume'
    'cancel'
    'stop'
    'status'
    )
    _wanted arguments expl 'command' compadd -- "$advixe_command_commands[@]"
  else
    local test_normal
    _conditional_normal
    test_normal=$?
    if [[ $test_normal -ne 33 ]]; then
      return 0
    elif compset -P '*-result-dir='; then
      _message "(outer) something to do"
      _path_files -/
    else
      # quick hack, to get the command out of the command line
      # TODO: fix that 'advixe-cl --command status -<TAB>' does not complete w/o this hack
      if [[ $CURRENT -gt 3 ]]; then
        shift 2 words
        (( CURRENT -= 2 ))
      fi

      # TODO: ensure --result-dir does not get suggested more than once
      local command_options;command_options=(
      '(-q --quiet -v --verbose)'{-q,--quiet}'[Suppress non-essential messages]'
      '(-v --verbose -q --quiet)'{-v,--verbose}'[Print additional information]'
      '--result-dir=[specify result directories]'
      '-- [continue with target and target options]'
      )
      _arguments "$command_options[@]"
    fi
  fi
}

_advixe_cl_snapshot() {
  if [[ $words[(($CURRENT - 1))] = -- ]] ; then
    _files -X 'snapshot filename' -g '*.advixeexpz'
    return 0
  fi
  local snapshot_options;snapshot_options=(
  '(--cache-binaries --no-cache-binaries)--cache-binaries[Cache binaries into snapshot]'
  '(--cache-binaries --no-cache-binaries)--no-cache-binaries[Do not cache binaries into snapshot]'
  '(--cache-sources --no-cache-sources)--cache-sources[Cache sources into snapshot]'
  '(--cache-sources --no-cache-sources)--no-cache-sources[Do not cache sources into snapshot]'
  '(--pack --no-pack)--pack[Pack snapshot into archive]'
  '(--pack --no-pack)--no-pack[Do not pack snapshot into archive]'
  '--project-dir[Project directory - top-level directory of data collection]:project directory:_path_files -/'
  '(-q --quiet -v --verbose)'{-q,--quiet}'[Suppress non-essential messages]'
  '(-v --verbose -q --quiet)'{-v,--verbose}'[Print additional information]'
  '-- [Snapshot filename]:snapshot file:_files -g \*.advixeexpz'
  '--mpi-rank=[MPI rank of the result to be imported]:MPI rank'
  '--search-dir=[specify search directories]'
  )
  if compset -P '*-mpi-rank='; then
    _message "Specify the MPI rank of the result to be imported."
    return 0;
  elif compset -P '*-search-dir=*='; then
    _path_files -/
  elif compset -P '*-search-dir='; then
    local -a search_categories
    search_categories=(
    'all'
    'bin'
    'src'
    'sym'
    'all:r'
    'bin:r'
    'src:r'
    'sym:r'
    'all:p'
    'bin:p'
    'src:p'
    'sym:p'
    'all:rp'
    'bin:rp'
    'src:rp'
    'sym:rp'
    )
    _wanted arguments expl "search categories" compadd -S '=' -- "$search_categories[@]"
  else
    _arguments -C "$snapshot_options[@]"
  fi
}

if [ $CURRENT -eq 2 ] ; then
  # suggest <action>
  _arguments ${advixe_actions} && return 0
elif [[ $words[2] = --help ]] ; then
  # suggest 'advixe-cl --help <action>'
  # 'help' and 'version' are still valid actions
  # leading -- need to be stripped off
  if [ $CURRENT -eq 3 ]
  then
    _values 'actions' ${advixe_actions[@]/--/} && return 0
  else
    # no further completion after 'advixe-cl --help <action>'
    return 0
  fi
elif [[ $words[2] = --version ]] ; then
  return 0
elif [[ $words[2] = --snapshot ]] ; then
  _advixe_cl_snapshot
  return 0
elif [[ $words[2] = --command ]] ; then
  _advixe_cl_command
  return 0
elif [[ $words[2] = --collect ]] ; then
  _advixe_cl_collect
  return 0
else
# not implemented
  # '--import-dir'
  # '--mark-up-loops'
  # '--report'
  # '--workflow'
  _message "not implemented yet, sorry"
fi
